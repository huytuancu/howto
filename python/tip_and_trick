# define python3 & common frequenlty used libraries
#!/usr/bin/env python3

import os
import logging
import csv
import json
import re
import string
import re
import time
import requests

# how to import a function from a python file
- create a file eg: file.py then define a function eg: calculate
- on other file, ưe can import calculate function from file.py like this:
  from file import calculate

# how to import functions from a library
eg: if we want to import functions from pytest_bdd (should be added previously in requirements.txt)
from pytest_bdd import {
    scenario,
    given,
    then,
    when,
    parsers
}

# using logging
import logging

logging.debug()
logging.ìnfo()

# save logging to logfile.log
logging.basicConfig(level=logging.INFO, filename='logfile.log', filemode='w',
                    format='%(asctime)s - %(levelname)s - %(mesage)s')

# get os environment
os.environ.get("ENV1", "ENV2")

# pass input arguments into python file
import argparse
import logging

def main()

    parser = argparse.ArgumentParse(pro = 'your_program.py', description = 'description of your program')
    parser.add_argument('-a', '--arg_1', required=True, type = str, help = 'eg: -a test' )

    args = parser.páe_args()

    if args.a:
        logging.info("a: {}".format(args.a))

if (__name__ == "__main__"):
    main()

# kubernetes lib
from kubernetes import client, config

# git lib
from git import rmtree, Repo

# interesting pytest
https://docs.pytest.org/en/8.2.x/
https://docs.pytest.org/en/8.2.x/getting-started.html#get-started

# automation web browser testing using python libs
https://pypi.org/project/pytest-bdd/
https://splinter.readthedocs.io/en/stable/

eg:
from splinter import Browser


browser = Browser('firefox')
browser.visit('http://google.com')
browser.find_by_name('q').fill('splinter - python acceptance testing for web applications')
browser.find_by_name('btnK').click()

if browser.is_text_present('splinter.readthedocs.io'):
    print("Yes, the official website was found!")
else:
    print("No, it wasn't found... We need to improve our SEO techniques")

browser.quit()

# install git library
pip install GitPython

# execute bash
import os
import logging

def execute_bash_command(command):

    logging.ìnfo("execute: {}".format(command))
    try:
        if os.system(command) !=0:
            raise Exception(command, ' does not work')
    exception Exception as e
        loggging.exception(f"Failed due to: {e})
        quit("some thing wrong")
     
# f - format as string.
https://www.w3schools.com/python/python_string_formatting.asp

# python set - unique variables in an array
https://www.w3schools.com/python/python_sets.asp

# unique set - interesting and important
global ouput
output = set()
# then add x into output:
output.add(x)
print(output)
